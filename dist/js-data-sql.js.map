{"version":3,"file":"js-data-sql.js","sources":["../src/index.js"],"sourcesContent":["import knex from 'knex'\nimport {utils} from 'js-data'\n\nimport {\n  Adapter,\n  reserved\n} from 'js-data-adapter'\nimport toString from 'lodash.tostring'\nimport snakeCase from 'lodash.snakecase'\n\nconst DEFAULTS = {}\n\nconst equal = function (query, field, value, isOr) {\n  if (value === null) {\n    return query[isOr ? 'orWhereNull' : 'whereNull'](field)\n  }\n  return query[getWhereType(isOr)](field, value)\n}\n\nconst notEqual = function (query, field, value, isOr) {\n  if (value === null) {\n    return query[isOr ? 'orWhereNotNull' : 'whereNotNull'](field)\n  }\n  return query[getWhereType(isOr)](field, '!=', value)\n}\n\nconst getWhereType = function (isOr) {\n  return isOr ? 'orWhere' : 'where'\n}\n\nconst MILES_REGEXP = /(\\d+(\\.\\d+)?)\\s*(m|M)iles$/\nconst KILOMETERS_REGEXP = /(\\d+(\\.\\d+)?)\\s*(k|K)$/\n\n/**\n * Default predicate functions for the filtering operators.\n *\n * @name module:js-data-sql.OPERATORS\n * @property {Function} == Equality operator.\n * @property {Function} != Inequality operator.\n * @property {Function} > \"Greater than\" operator.\n * @property {Function} >= \"Greater than or equal to\" operator.\n * @property {Function} < \"Less than\" operator.\n * @property {Function} <= \"Less than or equal to\" operator.\n * @property {Function} isectEmpty Operator to test that the intersection\n * between two arrays is empty. Not supported.\n * @property {Function} isectNotEmpty Operator to test that the intersection\n * between two arrays is NOT empty. Not supported.\n * @property {Function} in Operator to test whether a value is found in the\n * provided array.\n * @property {Function} notIn Operator to test whether a value is NOT found in\n * the provided array.\n * @property {Function} contains Operator to test whether an array contains the\n * provided value. Not supported.\n * @property {Function} notContains Operator to test whether an array does NOT\n * contain the provided value. Not supported.\n */\nexport const OPERATORS = {\n  '=': equal,\n  '==': equal,\n  '===': equal,\n  '!=': notEqual,\n  '!==': notEqual,\n  '>': function (query, field, value, isOr) {\n    return query[getWhereType(isOr)](field, '>', value)\n  },\n  '>=': function (query, field, value, isOr) {\n    return query[getWhereType(isOr)](field, '>=', value)\n  },\n  '<': function (query, field, value, isOr) {\n    return query[getWhereType(isOr)](field, '<', value)\n  },\n  '<=': function (query, field, value, isOr) {\n    return query[getWhereType(isOr)](field, '<=', value)\n  },\n  'isectEmpty': function (query, field, value, isOr) {\n    throw new Error('isectEmpty not supported!')\n  },\n  'isectNotEmpty': function (query, field, value, isOr) {\n    throw new Error('isectNotEmpty not supported!')\n  },\n  'in': function (query, field, value, isOr) {\n    return query[getWhereType(isOr)](field, 'in', value)\n  },\n  'notIn': function (query, field, value, isOr) {\n    return query[isOr ? 'orNotIn' : 'notIn'](field, value)\n  },\n  'contains': function (query, field, value, isOr) {\n    throw new Error('contains not supported!')\n  },\n  'notContains': function (query, field, value, isOr) {\n    throw new Error('notContains not supported!')\n  },\n  'like': function (query, field, value, isOr) {\n    return query[getWhereType(isOr)](field, 'like', value)\n  },\n  'near': function (query, field, value, isOr) {\n    let radius\n    let unitsPerDegree\n    if (typeof value.radius === 'number' || MILES_REGEXP.test(value.radius)) {\n      radius = typeof value.radius === 'number' ? value.radius : value.radius.match(MILES_REGEXP)[1]\n      unitsPerDegree = 69.0 // miles per degree\n    } else if (KILOMETERS_REGEXP.test(value.radius)) {\n      radius = value.radius.match(KILOMETERS_REGEXP)[1]\n      unitsPerDegree = 111.045 // kilometers per degree;\n    } else {\n      throw new Error('Unknown radius distance units')\n    }\n\n    let [latitudeColumn, longitudeColumn] = field.split(',').map((c) => c.trim())\n    let [latitude, longitude] = value.center\n\n    // Uses indexes on `latitudeColumn` / `longitudeColumn` if available\n    query = query\n      .whereBetween(latitudeColumn, [\n        latitude - (radius / unitsPerDegree),\n        latitude + (radius / unitsPerDegree)\n      ])\n      .whereBetween(longitudeColumn, [\n        longitude - (radius / (unitsPerDegree * Math.cos(latitude * (Math.PI / 180)))),\n        longitude + (radius / (unitsPerDegree * Math.cos(latitude * (Math.PI / 180))))\n      ])\n\n    if (value.calculateDistance) {\n      let distanceColumn = (typeof value.calculateDistance === 'string') ? value.calculateDistance : 'distance'\n      query = query.select(knex.raw(`\n        ${unitsPerDegree} * DEGREES(ACOS(\n          COS(RADIANS(?)) * COS(RADIANS(${latitudeColumn})) *\n          COS(RADIANS(${longitudeColumn}) - RADIANS(?)) +\n          SIN(RADIANS(?)) * SIN(RADIANS(${latitudeColumn}))\n        )) AS ${distanceColumn}`, [latitude, longitude, latitude]))\n    }\n    return query\n  }\n}\n\nObject.freeze(OPERATORS)\n\n/**\n * SqlAdapter class.\n *\n * @example\n * // Use Container instead of DataStore on the server\n * import { Container } from 'js-data';\n * import SqlAdapter from 'js-data-sql';\n *\n * // Create a store to hold your Mappers\n * const store = new Container();\n *\n * // Create an instance of SqlAdapter with default settings\n * const adapter = new SqlAdapter();\n *\n * // Mappers in \"store\" will use the Sql adapter by default\n * store.registerAdapter('sql', adapter, { default: true });\n *\n * // Create a Mapper that maps to a \"user\" table\n * store.defineMapper('user');\n *\n * @class SqlAdapter\n * @extends Adapter\n * @param {Object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Adapter#debug}.\n * @param {Object} [opts.knexOpts] See {@link SqlAdapter#knexOpts}.\n * @param {Object} [opts.operators] See {@link SqlAdapter#operators}.\n * @param {boolean} [opts.raw=false] See {@link Adapter#raw}.\n */\nexport function SqlAdapter (opts) {\n  utils.classCallCheck(this, SqlAdapter)\n  opts || (opts = {})\n  opts.knexOpts || (opts.knexOpts = {})\n  utils.fillIn(opts, DEFAULTS)\n\n  Object.defineProperty(this, 'knex', {\n    writable: true,\n    value: undefined\n  })\n\n  Adapter.call(this, opts)\n\n  /**\n   * Override the default predicate functions for specified operators.\n   *\n   * @name SqlAdapter#operators\n   * @type {Object}\n   * @default {}\n   */\n  this.knex || (this.knex = knex(this.knexOpts))\n\n  /**\n   * Override the default predicate functions for specified operators.\n   *\n   * @name SqlAdapter#operators\n   * @type {Object}\n   * @default {}\n   */\n  this.operators || (this.operators = {})\n  utils.fillIn(this.operators, OPERATORS)\n}\n\nfunction getTable (mapper) {\n  return mapper.table || snakeCase(mapper.name)\n}\n\n/**\n * Alternative to ES2015 class syntax for extending `SqlAdapter`.\n *\n * @example <caption>Using the ES2015 class syntax.</caption>\n * class MySqlAdapter extends SqlAdapter {...};\n * const adapter = new MySqlAdapter();\n *\n * @example <caption>Using {@link SqlAdapter.extend}.</caption>\n * const instanceProps = {...};\n * const classProps = {...};\n *\n * const MySqlAdapter = SqlAdapter.extend(instanceProps, classProps);\n * const adapter = new MySqlAdapter();\n *\n * @method SqlAdapter.extend\n * @static\n * @param {Object} [instanceProps] Properties that will be added to the\n * prototype of the subclass.\n * @param {Object} [classProps] Properties that will be added as static\n * properties to the subclass itself.\n * @return {Constructor} Subclass of `SqlAdapter`.\n */\nSqlAdapter.extend = utils.extend\n\n/*\nfunction processRelationField (resourceConfig, query, field, criteria, options, joinedTables) {\n  let fieldParts = field.split('.')\n  let localResourceConfig = resourceConfig\n  let relationPath = []\n  let relationName = null;\n\n  while (fieldParts.length >= 2) {\n    relationName = fieldParts.shift()\n    let [relation] = localResourceConfig.relationList.filter(r => r.relation === relationName || r.localField === relationName)\n\n    if (relation) {\n      let relationResourceConfig = resourceConfig.getResource(relation.relation)\n      relationPath.push(relation.relation)\n\n      if (relation.type === 'belongsTo' || relation.type === 'hasOne') {\n        // Apply table join for belongsTo/hasOne property (if not done already)\n        if (!joinedTables.some(t => t === relationPath.join('.'))) {\n          let table = getTable(localResourceConfig)\n          let localId = `${table}.${relation.localKey}`\n\n          let relationTable = getTable(relationResourceConfig)\n          let foreignId = `${relationTable}.${relationResourceConfig.idAttribute}`\n\n          query.leftJoin(relationTable, localId, foreignId)\n          joinedTables.push(relationPath.join('.'))\n        }\n      } else if (relation.type === 'hasMany') {\n        // Perform `WHERE EXISTS` subquery for hasMany property\n        let existsParams = {\n          [`${relationName}.${fieldParts.splice(0).join('.')}`]: criteria // remaining field(s) handled by EXISTS subquery\n        };\n        let subQueryTable = getTable(relationResourceConfig);\n        let subQueryOptions = deepMixIn({}, options, { query: knex(this.defaults).select(`${subQueryTable}.*`).from(subQueryTable) })\n        let subQuery = this.filterQuery(relationResourceConfig, existsParams, subQueryOptions)\n          .whereRaw('??.??=??.??', [\n            getTable(relationResourceConfig),\n            relation.foreignKey,\n            getTable(localResourceConfig),\n            localResourceConfig.idAttribute\n          ])\n        if (Object.keys(criteria).some(k => k.indexOf('|') > -1)) {\n          query.orWhereExists(subQuery);\n        } else {\n          query.whereExists(subQuery);\n        }\n      }\n\n      localResourceConfig = relationResourceConfig\n    } else {\n      // hopefully a qualified local column\n    }\n  }\n  relationName = fieldParts.shift();\n\n  return relationName ? `${getTable(localResourceConfig)}.${relationName}` : null;\n}\n\nfunction loadWithRelations (items, resourceConfig, options) {\n  let tasks = []\n  let instance = Array.isArray(items) ? null : items\n\n  if (resourceConfig.relationList) {\n    resourceConfig.relationList.forEach(def => {\n      let relationName = def.relation\n      let relationDef = resourceConfig.getResource(relationName)\n\n      let containedName = null\n      if (contains(options.with, relationName)) {\n        containedName = relationName\n      } else if (contains(options.with, def.localField)) {\n        containedName = def.localField\n      } else {\n        return\n      }\n\n      let __options = deepMixIn({}, options.orig ? options.orig() : options)\n\n      // Filter to only properties under current relation\n      __options.with = options.with.filter(relation => {\n        return relation !== containedName &&\n        relation.indexOf(containedName) === 0 &&\n        relation.length >= containedName.length &&\n        relation[containedName.length] === '.'\n      }).map(relation => relation.substr(containedName.length + 1))\n\n      let task\n\n      if ((def.type === 'hasOne' || def.type === 'hasMany') && def.foreignKey) {\n        task = this.findAll(resourceConfig.getResource(relationName), {\n          where: {\n            [def.foreignKey]: instance ?\n              { '==': instance[def.localKey || resourceConfig.idAttribute] } :\n              { 'in': items.map(item => item[def.localKey || resourceConfig.idAttribute]) }\n          }\n        }, __options).then(relatedItems => {\n          if (instance) {\n            if (def.type === 'hasOne' && relatedItems.length) {\n              instance[def.localField] = relatedItems[0]\n            } else {\n              instance[def.localField] = relatedItems\n            }\n          } else {\n            items.forEach(item => {\n              let attached = relatedItems.filter(ri => ri[def.foreignKey] === item[def.localKey || resourceConfig.idAttribute])\n              if (def.type === 'hasOne' && attached.length) {\n                item[def.localField] = attached[0]\n              } else {\n                item[def.localField] = attached\n              }\n            })\n          }\n\n          return relatedItems\n        })\n      } else if (def.type === 'hasMany' && def.localKeys) {\n        // TODO: Write test for with: hasMany property with localKeys\n        let localKeys = []\n\n        if (instance) {\n          let itemKeys = instance[def.localKeys] || []\n          itemKeys = Array.isArray(itemKeys) ? itemKeys : Object.keys(itemKeys)\n          localKeys = localKeys.concat(itemKeys || [])\n        } else {\n          items.forEach(item => {\n            let itemKeys = item[def.localKeys] || []\n            itemKeys = Array.isArray(itemKeys) ? itemKeys : Object.keys(itemKeys)\n            localKeys = localKeys.concat(itemKeys || [])\n          })\n        }\n\n        task = this.findAll(resourceConfig.getResource(relationName), {\n          where: {\n            [relationDef.idAttribute]: {\n              'in': filter(unique(localKeys), x => x)\n            }\n          }\n        }, __options).then(relatedItems => {\n          if (instance) {\n            instance[def.localField] = relatedItems\n          } else {\n            items.forEach(item => {\n              let itemKeys = item[def.localKeys] || []\n              let attached = relatedItems.filter(ri => itemKeys && contains(itemKeys, ri[relationDef.idAttribute]))\n              item[def.localField] = attached\n            })\n          }\n\n          return relatedItems\n        })\n      } else if (def.type === 'belongsTo' || (def.type === 'hasOne' && def.localKey)) {\n        if (instance) {\n          let id = get(instance, def.localKey)\n          if (id) {\n            task = this.findAll(resourceConfig.getResource(relationName), {\n              where: {\n                [def.foreignKey || relationDef.idAttribute]: { '==': id }\n              }\n            }, __options).then(relatedItems => {\n              let relatedItem = relatedItems && relatedItems[0];\n              instance[def.localField] = relatedItem\n              return relatedItem\n            })\n          }\n        } else {\n          let ids = items.map(item => get(item, def.localKey)).filter(x => x)\n          if (ids.length) {\n            task = this.findAll(resourceConfig.getResource(relationName), {\n              where: {\n                [def.foreignKey || relationDef.idAttribute]: { 'in': ids }\n              }\n            }, __options).then(relatedItems => {\n              items.forEach(item => {\n                relatedItems.forEach(relatedItem => {\n                  if (relatedItem[def.foreignKey || relationDef.idAttribute] === item[def.localKey]) {\n                    item[def.localField] = relatedItem\n                  }\n                })\n              })\n              return relatedItems\n            })\n          }\n        }\n      }\n\n      if (task) {\n        tasks.push(task)\n      }\n    })\n  }\n  return Promise.all(tasks)\n}\n*/\n\nAdapter.extend({\n  constructor: SqlAdapter,\n\n  _count (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n    return this.filterQuery(sqlBuilder(getTable(mapper)), query, opts)\n      .count('* as count')\n      .then((rows) => [rows[0].count, {}])\n  },\n\n  _create (mapper, props, opts) {\n    const idAttribute = mapper.idAttribute\n    props || (props = {})\n    opts || (opts = {})\n\n    const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n    return sqlBuilder(getTable(mapper))\n      .insert(props, idAttribute)\n      .then((ids) => {\n        const id = utils.isUndefined(props[idAttribute]) ? (ids.length ? ids[0] : undefined) : props[idAttribute]\n        if (utils.isUndefined(id)) {\n          throw new Error('Failed to create!')\n        }\n        return this._find(mapper, id, opts).then((result) => [result[0], { ids }])\n      })\n  },\n\n  _createMany (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const tasks = props.map((record) => this._create(mapper, record, opts))\n    return Promise.all(tasks).then((results) => [results.map((result) => result[0]), {}])\n  },\n\n  _destroy (mapper, id, opts) {\n    opts || (opts = {})\n\n    const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n    return sqlBuilder(getTable(mapper))\n      .where(mapper.idAttribute, toString(id))\n      .del()\n      .then(() => [undefined, {}])\n  },\n\n  _destroyAll (mapper, query, opts) {\n    query || (query = {})\n    opts || (opts = {})\n\n    const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n    return this.filterQuery(sqlBuilder(getTable(mapper)), query, opts)\n      .del()\n      .then(() => [undefined, {}])\n  },\n\n  _find (mapper, id, opts) {\n    opts || (opts = {})\n\n    const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n    const table = getTable(mapper)\n    return sqlBuilder\n      .select(`${table}.*`)\n      .from(table)\n      .where(`${table}.${mapper.idAttribute}`, toString(id))\n      .then((rows) => {\n        if (!rows || !rows.length) {\n          return [undefined, {}]\n        }\n        return [rows[0], {}]\n      })\n  },\n\n  _findAll (mapper, query, opts) {\n    query || (query = {})\n    opts || (opts = {})\n\n    return this.filterQuery(this.selectTable(mapper, opts), query, opts).then((rows) => [rows || [], {}])\n  },\n\n  _sum (mapper, field, query, opts) {\n    if (!utils.isString(field)) {\n      throw new Error('field must be a string!')\n    }\n    opts || (opts = {})\n    query || (query = {})\n\n    const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n    return this.filterQuery(sqlBuilder(getTable(mapper)), query, opts)\n      .sum(`${field} as sum`)\n      .then((rows) => [rows[0].sum || 0, {}])\n  },\n\n  _update (mapper, id, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n    return sqlBuilder(getTable(mapper))\n      .where(mapper.idAttribute, toString(id))\n      .update(props)\n      .then(() => this._find(mapper, id, opts))\n      .then((result) => {\n        if (!result[0]) {\n          throw new Error('Not Found')\n        }\n        return result\n      })\n  },\n\n  _updateAll (mapper, props, query, opts) {\n    const idAttribute = mapper.idAttribute\n    props || (props = {})\n    query || (query = {})\n    opts || (opts = {})\n\n    let ids\n\n    return this._findAll(mapper, query, opts).then((result) => {\n      const records = result[0]\n      ids = records.map((record) => record[idAttribute])\n      const sqlBuilder = utils.isUndefined(opts.transaction) ? this.knex : opts.transaction\n      return this.filterQuery(sqlBuilder(getTable(mapper)), query, opts).update(props)\n    }).then(() => {\n      const _query = { where: {} }\n      _query.where[idAttribute] = { 'in': ids }\n      return this._findAll(mapper, _query, opts)\n    })\n  },\n\n  _updateMany (mapper, records, opts) {\n    const idAttribute = mapper.idAttribute\n    records || (records = [])\n    opts || (opts = {})\n\n    const tasks = records.map((record) => this._update(mapper, record[idAttribute], record, opts))\n    return Promise.all(tasks).then((results) => [results.map((result) => result[0]), {}])\n  },\n\n  applyWhereFromObject (sqlBuilder, where, opts) {\n    utils.forOwn(where, (criteria, field) => {\n      if (!utils.isObject(criteria)) {\n        criteria = { '==': criteria }\n      }\n      // Apply filter for each operator\n      utils.forOwn(criteria, (value, operator) => {\n        let isOr = false\n        if (operator && operator[0] === '|') {\n          operator = operator.substr(1)\n          isOr = true\n        }\n        let predicateFn = this.getOperator(operator, opts)\n        if (predicateFn) {\n          sqlBuilder = predicateFn(sqlBuilder, field, value, isOr)\n        } else {\n          throw new Error(`Operator ${operator} not supported!`)\n        }\n      })\n    })\n    return sqlBuilder\n  },\n\n  applyWhereFromArray (sqlBuilder, where, opts) {\n    where.forEach((_where, i) => {\n      if (_where === 'and' || _where === 'or') {\n        return\n      }\n      const self = this\n      const prev = where[i - 1]\n      const parser = utils.isArray(_where) ? this.applyWhereFromArray : this.applyWhereFromObject\n      if (prev) {\n        if (prev === 'or') {\n          sqlBuilder = sqlBuilder.orWhere(function () {\n            parser.call(self, this, _where, opts)\n          })\n        } else {\n          sqlBuilder = sqlBuilder.andWhere(function () {\n            parser.call(self, this, _where, opts)\n          })\n        }\n      } else {\n        sqlBuilder = sqlBuilder.where(function () {\n          parser.call(self, this, _where, opts)\n        })\n      }\n    })\n    return sqlBuilder\n  },\n\n  filterQuery (sqlBuilder, query, opts) {\n    query = utils.plainCopy(query || {})\n    opts || (opts = {})\n    opts.operators || (opts.operators = {})\n    query.where || (query.where = {})\n    query.orderBy || (query.orderBy = query.sort)\n    query.orderBy || (query.orderBy = [])\n    query.skip || (query.skip = query.offset)\n\n    // Transform non-keyword properties to \"where\" clause configuration\n    utils.forOwn(query, (config, keyword) => {\n      if (reserved.indexOf(keyword) === -1) {\n        if (utils.isObject(config)) {\n          query.where[keyword] = config\n        } else {\n          query.where[keyword] = {\n            '==': config\n          }\n        }\n        delete query[keyword]\n      }\n    })\n\n    // Filter\n    if (utils.isObject(query.where) && Object.keys(query.where).length !== 0) {\n      // Apply filter for each field\n      sqlBuilder = this.applyWhereFromObject(sqlBuilder, query.where, opts)\n    } else if (utils.isArray(query.where)) {\n      sqlBuilder = this.applyWhereFromArray(sqlBuilder, query.where, opts)\n    }\n\n    // Sort\n    if (query.orderBy) {\n      if (utils.isString(query.orderBy)) {\n        query.orderBy = [\n          [query.orderBy, 'asc']\n        ]\n      }\n      for (var i = 0; i < query.orderBy.length; i++) {\n        if (utils.isString(query.orderBy[i])) {\n          query.orderBy[i] = [query.orderBy[i], 'asc']\n        }\n        sqlBuilder = sqlBuilder.orderBy(query.orderBy[i][0], (query.orderBy[i][1] || '').toUpperCase() === 'DESC' ? 'desc' : 'asc')\n      }\n    }\n\n    // Offset\n    if (query.skip) {\n      sqlBuilder = sqlBuilder.offset(+query.skip)\n    }\n\n    // Limit\n    if (query.limit) {\n      sqlBuilder = sqlBuilder.limit(+query.limit)\n    }\n\n    return sqlBuilder\n    // if (!isEmpty(params.where)) {\n    //   forOwn(params.where, (criteria, field) => {\n    //     if (contains(field, '.')) {\n    //       if (contains(field, ',')) {\n    //         let splitFields = field.split(',').map(c => c.trim())\n    //         field = splitFields.map(splitField => processRelationField.call(this, resourceConfig, query, splitField, criteria, options, joinedTables)).join(',')\n    //       } else {\n    //         field = processRelationField.call(this, resourceConfig, query, field, criteria, options, joinedTables)\n    //       }\n    //     }\n    //   })\n    // }\n  },\n\n  /**\n   * Resolve the predicate function for the specified operator based on the\n   * given options and this adapter's settings.\n   *\n   * @name SqlAdapter#getOperator\n   * @method\n   * @param {string} operator The name of the operator.\n   * @param {Object} [opts] Configuration options.\n   * @param {Object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @return {*} The predicate function for the specified operator.\n   */\n  getOperator (operator, opts) {\n    opts || (opts = {})\n    opts.operators || (opts.operators = {})\n    let ownOps = this.operators || {}\n    return utils.isUndefined(opts.operators[operator]) ? ownOps[operator] : opts.operators[operator]\n  },\n\n  getTable (mapper) {\n    return mapper.table || snakeCase(mapper.name)\n  },\n\n  selectTable (mapper, opts) {\n    opts || (opts = {})\n    const query = utils.isUndefined(opts.query) ? this.knex : opts.query\n    const table = this.getTable(mapper)\n    return query.select(`${table}.*`).from(table)\n  }\n})\n\n/**\n * Details of the current version of the `js-data-sql` module.\n *\n * @example\n * import { version } from 'js-data-sql';\n * console.log(version.full);\n *\n * @name module:js-data-sql.version\n * @type {object}\n * @property {string} version.full The full semver value.\n * @property {number} version.major The major version number.\n * @property {number} version.minor The minor version number.\n * @property {number} version.patch The patch version number.\n * @property {(string|boolean)} version.alpha The alpha version value,\n * otherwise `false` if the current version is not alpha.\n * @property {(string|boolean)} version.beta The beta version value,\n * otherwise `false` if the current version is not beta.\n */\nexport const version = '<%= version %>'\n\n/**\n * {@link SqlAdapter} class.\n *\n * @example <caption>CommonJS</caption>\n * const SqlAdapter = require('js-data-sql').SqlAdapter;\n * const adapter = new SqlAdapter();\n *\n * @example <caption>ES2015 Modules</caption>\n * import { SqlAdapter } from 'js-data-sql';\n * const adapter = new SqlAdapter();\n *\n * @name module:js-data-sql.SqlAdapter\n * @see SqlAdapter\n * @type {Constructor}\n */\n\n/**\n * Registered as `js-data-sql` in NPM.\n *\n * @example <caption>Install from NPM (for use with MySQL)</caption>\n * npm i --save js-data-sql js-data mysql\n *\n * @example <caption>Load via CommonJS</caption>\n * const SqlAdapter = require('js-data-sql').SqlAdapter;\n * const adapter = new SqlAdapter();\n *\n * @example <caption>Load via ES2015 Modules</caption>\n * import { SqlAdapter } from 'js-data-sql';\n * const adapter = new SqlAdapter();\n *\n * @module js-data-sql\n */\n\n/**\n * Create a subclass of this SqlAdapter:\n * @example <caption>SqlAdapter.extend</caption>\n * // Normally you would do: import { SqlAdapter } from 'js-data-sql';\n * const JSDataSql = require('js-data-sql');\n * const { SqlAdapter } = JSDataSql;\n * console.log('Using JSDataSql v' + JSDataSql.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSqlAdapterClass extends SqlAdapter {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSqlAdapter = new CustomSqlAdapterClass();\n * console.log(customSqlAdapter.foo());\n * console.log(CustomSqlAdapterClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherSqlAdapterClass = SqlAdapter.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherSqlAdapter = new OtherSqlAdapterClass();\n * console.log(otherSqlAdapter.foo());\n * console.log(OtherSqlAdapterClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSqlAdapterClass () {\n *   SqlAdapter.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * SqlAdapter.extend({\n *   constructor: AnotherSqlAdapterClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherSqlAdapter = new AnotherSqlAdapterClass();\n * console.log(anotherSqlAdapter.created_at);\n * console.log(anotherSqlAdapter.foo());\n * console.log(AnotherSqlAdapterClass.beep());\n *\n * @method SqlAdapter.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this SqlAdapter class.\n * @since 3.0.0\n */\n"],"names":["DEFAULTS","equal","query","field","value","isOr","getWhereType","notEqual","MILES_REGEXP","KILOMETERS_REGEXP","OPERATORS","Error","radius","unitsPerDegree","test","match","split","map","c","trim","latitudeColumn","longitudeColumn","center","latitude","longitude","whereBetween","Math","cos","PI","calculateDistance","distanceColumn","select","knex","raw","Object","freeze","SqlAdapter","opts","classCallCheck","knexOpts","fillIn","defineProperty","undefined","call","operators","getTable","mapper","table","snakeCase","name","extend","utils","Adapter","sqlBuilder","isUndefined","transaction","filterQuery","count","then","rows","props","idAttribute","insert","ids","id","length","_find","result","tasks","record","_create","Promise","all","results","where","toString","del","from","selectTable","isString","sum","update","_findAll","records","_query","_update","forOwn","criteria","isObject","operator","substr","predicateFn","getOperator","forEach","_where","i","self","prev","parser","isArray","applyWhereFromArray","applyWhereFromObject","orWhere","andWhere","plainCopy","orderBy","sort","skip","offset","config","keyword","reserved","indexOf","keys","toUpperCase","limit","ownOps","version"],"mappings":"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"}